
variables:
  TF_ROOT: ${CI_PROJECT_DIR}  # The relative path to the root directory of the Terraform project
  TF_STATE_NAME: ${TF_STATE_NAME:-default}  # The name of the state file used by the GitLab Managed Terraform state backend
  TEMPLATE_REGISTRY_HOST: 'registry.gitlab.com'

cache:
  key: "${TF_ROOT}"
  paths:
    - ${TF_ROOT}/.terraform/

.terraform:fmt: &terraform_fmt
  stage: validate
  image:
    name: "$TEMPLATE_REGISTRY_HOST/gitlab-org/terraform-images/releases/terraform:1.1.9"
  script:
    - cd "${TF_ROOT}/DevOps/terraform"
    - ls -lrt
    - terraform fmt --recursive --check
  allow_failure: true

.terraform:validate: &terraform_validate
  stage: validate
  image:
    name: "$TEMPLATE_REGISTRY_HOST/gitlab-org/terraform-images/releases/terraform:1.1.9"
  script:
    - cd "${TF_ROOT}/DevOps/terraform"
    - terraform init
    - terraform validate
  variables:
    environment: prod

.terraform:build: &terraform_build
  stage: build
  image:
    name: "$TEMPLATE_REGISTRY_HOST/gitlab-org/terraform-images/releases/terraform:1.1.9"
  script:
    - cd "${TF_ROOT}/DevOps/terraform"
    - terraform init
    - terraform plan -var-file backends/$environment.tfvars -out ${TF_ROOT}/plan.json
  variables:
    environment: prod

.terraform:deploy: &terraform_deploy
  stage: deploy
  image:
    name: "$TEMPLATE_REGISTRY_HOST/gitlab-org/terraform-images/releases/terraform:1.1.9"
  script:
    - cd "${TF_ROOT}/DevOps/terraform"
    - terraform init
    - terraform apply -var-file backends/$environment.tfvars --auto-approve
  variables:
    environment: prod
